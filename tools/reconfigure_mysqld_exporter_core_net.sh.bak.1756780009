# /home/melynxis/solace/tools/reconfigure_mysqld_exporter_core_net.sh
#!/usr/bin/env bash
set -euo pipefail

BASE="/home/melynxis/solace"
FILE="$BASE/infra/exporters.compose.yml"
CNF="$BASE/infra/mysqld_exporter.my.cnf"

# Ensure my.cnf exists; if not, create with sane defaults (password must match what you set)
if [[ ! -f "$CNF" ]]; then
  echo "Creating $CNF (adjust password if needed)..."
  cat > "$CNF" <<'EOF'
[client]
user=exporter
password=exporter_pwd
host=solace_mysql
port=3306
EOF
  chmod 600 "$CNF"
else
  # Force host to container DNS
  sed -i 's/^host=.*/host=solace_mysql/' "$CNF"
fi

backup="${FILE}.bak.$(date +%s)"
cp -a "$FILE" "$backup"
echo "Backed up exporters compose to: $backup"

# 1) Drop obsolete `version:` line
sed -i '/^version:/d' "$FILE"

# 2) Ensure external core network block exists
if ! grep -q '^networks:' "$FILE"; then
cat >> "$FILE" <<'YAML'

networks:
  core:
    external: true
    name: solace-core_default
YAML
else
  if ! grep -q 'name: solace-core_default' "$FILE"; then
    awk '
      BEGIN{in_n=0;printed=0}
      /^networks:/ {in_n=1}
      {print}
      END{
        if(!printed){
          print "  core:"
          print "    external: true"
          print "    name: solace-core_default"
        }
      }
    ' "$FILE" > "${FILE}.tmp" && mv "${FILE}.tmp" "$FILE"
  fi
fi

# 3) Rewrite mysqld_exporter block:
python3 - "$FILE" "$CNF" <<'PY'
import re, sys
p, cnf = sys.argv[1], sys.argv[2]
t = open(p).read()
m = re.search(r'(\n  mysqld_exporter:\n(?:.*\n)*?)(?=\n  \w|$)', t)
if not m:
  print("mysqld_exporter block not found", file=sys.stderr); sys.exit(1)
blk = m.group(1)

# Remove network_mode host (we're going to bridge)
blk = re.sub(r'\n\s+network_mode:\s*host\n', '\n', blk)

# Ensure ports mapping exists
if 'ports:' not in blk or ':9104' not in blk:
  if 'ports:' in blk:
    blk = re.sub(r'(    ports:\n)((?:\s+-\s*".*"\n)*)',
                 lambda m: m.group(1) + (m.group(2) if ':9104' in m.group(2) else m.group(2) + '      - "9104:9104"\n'),
                 blk)
  else:
    blk += '    ports: ["9104:9104"]\n'

# Ensure networks include core
if 'networks:' not in blk:
  blk += '    networks:\n      - core\n'
elif '- core' not in blk:
  blk = re.sub(r'(    networks:\n)', r'\1      - core\n', blk)

# Ensure config file mount present
if 'volumes:' not in blk:
  blk += f'    volumes:\n      - {cnf}:/etc/mysqld_exporter.my.cnf:ro\n'
elif '/etc/mysqld_exporter.my.cnf' not in blk:
  blk = re.sub(r'(    volumes:\n)', r'\1      - '+cnf+':/etc/mysqld_exporter.my.cnf:ro\n', blk)

# Ensure command uses --config.my-cnf
if 'command:' not in blk:
  blk += '    command: ["--config.my-cnf=/etc/mysqld_exporter.my.cnf"]\n'
elif '--config.my-cnf=' not in blk:
  # Replace existing command with the correct one (simple approach)
  blk = re.sub(r'(\n\s+command:.*\n)', '', blk)
  blk += '    command: ["--config.my-cnf=/etc/mysqld_exporter.my.cnf"]\n'

# Remove any DATA_SOURCE_NAME leftover
blk = re.sub(r'\n\s+environment:\n(?:\s+.+\n)*', lambda s: (
  "\n    environment:\n" + "\n".join(
    line for line in s.group(0).splitlines()
    if "DATA_SOURCE_NAME" not in line
  ) + "\n"
) if "environment:" in s.group(0) else s.group(0), blk)

t = t[:m.start(1)] + blk + t[m.end(1):]
open(p,'w').write(t)
PY

echo "Restarting exporters..."
docker compose -f "$FILE" up -d

echo "Waiting 6s, then checking mysqld_exporter on http://127.0.0.1:9104/metrics ..."
sleep 6
if ! curl -fsS http://127.0.0.1:9104/metrics | head -n 10; then
  echo "mysqld_exporter still not responding."
  echo "Logs:"
  docker logs --tail=200 solace_mysqld_exporter || true
  exit 1
fi
echo "âœ… mysqld_exporter responding on :9104"
